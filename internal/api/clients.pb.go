// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: clients.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientsMS_Bool int32

const (
	ClientsMS_Bool_IS_ANY   ClientsMS_Bool = 0
	ClientsMS_Bool_IS_FALSE ClientsMS_Bool = 1
	ClientsMS_Bool_IS_TRUE  ClientsMS_Bool = 2
)

// Enum value maps for ClientsMS_Bool.
var (
	ClientsMS_Bool_name = map[int32]string{
		0: "IS_ANY",
		1: "IS_FALSE",
		2: "IS_TRUE",
	}
	ClientsMS_Bool_value = map[string]int32{
		"IS_ANY":   0,
		"IS_FALSE": 1,
		"IS_TRUE":  2,
	}
)

func (x ClientsMS_Bool) Enum() *ClientsMS_Bool {
	p := new(ClientsMS_Bool)
	*p = x
	return p
}

func (x ClientsMS_Bool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientsMS_Bool) Descriptor() protoreflect.EnumDescriptor {
	return file_clients_proto_enumTypes[0].Descriptor()
}

func (ClientsMS_Bool) Type() protoreflect.EnumType {
	return &file_clients_proto_enumTypes[0]
}

func (x ClientsMS_Bool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientsMS_Bool.Descriptor instead.
func (ClientsMS_Bool) EnumDescriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{0}
}

// Order type for all entities
type ClientsMS_OrderType int32

const (
	ClientsMS_OrderType_ASC  ClientsMS_OrderType = 0
	ClientsMS_OrderType_DESC ClientsMS_OrderType = 1
)

// Enum value maps for ClientsMS_OrderType.
var (
	ClientsMS_OrderType_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	ClientsMS_OrderType_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x ClientsMS_OrderType) Enum() *ClientsMS_OrderType {
	p := new(ClientsMS_OrderType)
	*p = x
	return p
}

func (x ClientsMS_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientsMS_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_clients_proto_enumTypes[1].Descriptor()
}

func (ClientsMS_OrderType) Type() protoreflect.EnumType {
	return &file_clients_proto_enumTypes[1]
}

func (x ClientsMS_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientsMS_OrderType.Descriptor instead.
func (ClientsMS_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{1}
}

// Countries
type ClientsMS_CountryOrder int32

const (
	ClientsMS_CountryOrder_BY_COUNTRY_ID      ClientsMS_CountryOrder = 0
	ClientsMS_CountryOrder_BY_COUNTRY_NAME    ClientsMS_CountryOrder = 1
	ClientsMS_CountryOrder_BY_COUNTRY_CREATED ClientsMS_CountryOrder = 2
	ClientsMS_CountryOrder_BY_COUNTRY_CHANGED ClientsMS_CountryOrder = 3
)

// Enum value maps for ClientsMS_CountryOrder.
var (
	ClientsMS_CountryOrder_name = map[int32]string{
		0: "BY_COUNTRY_ID",
		1: "BY_COUNTRY_NAME",
		2: "BY_COUNTRY_CREATED",
		3: "BY_COUNTRY_CHANGED",
	}
	ClientsMS_CountryOrder_value = map[string]int32{
		"BY_COUNTRY_ID":      0,
		"BY_COUNTRY_NAME":    1,
		"BY_COUNTRY_CREATED": 2,
		"BY_COUNTRY_CHANGED": 3,
	}
)

func (x ClientsMS_CountryOrder) Enum() *ClientsMS_CountryOrder {
	p := new(ClientsMS_CountryOrder)
	*p = x
	return p
}

func (x ClientsMS_CountryOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientsMS_CountryOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_clients_proto_enumTypes[2].Descriptor()
}

func (ClientsMS_CountryOrder) Type() protoreflect.EnumType {
	return &file_clients_proto_enumTypes[2]
}

func (x ClientsMS_CountryOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientsMS_CountryOrder.Descriptor instead.
func (ClientsMS_CountryOrder) EnumDescriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{2}
}

// Address type
type ClientsMS_AddressTypesOrder int32

const (
	ClientsMS_AddressTypesOrder_BY_ADDR_TYPE_ID      ClientsMS_AddressTypesOrder = 0
	ClientsMS_AddressTypesOrder_BY_ADDR_TYPE_NAME    ClientsMS_AddressTypesOrder = 1
	ClientsMS_AddressTypesOrder_BY_ADDR_TYPE_CODE    ClientsMS_AddressTypesOrder = 2
	ClientsMS_AddressTypesOrder_BY_ADDR_TYPE_CREATED ClientsMS_AddressTypesOrder = 3
	ClientsMS_AddressTypesOrder_BY_ADDR_TYPE_CHANGED ClientsMS_AddressTypesOrder = 4
)

// Enum value maps for ClientsMS_AddressTypesOrder.
var (
	ClientsMS_AddressTypesOrder_name = map[int32]string{
		0: "BY_ADDR_TYPE_ID",
		1: "BY_ADDR_TYPE_NAME",
		2: "BY_ADDR_TYPE_CODE",
		3: "BY_ADDR_TYPE_CREATED",
		4: "BY_ADDR_TYPE_CHANGED",
	}
	ClientsMS_AddressTypesOrder_value = map[string]int32{
		"BY_ADDR_TYPE_ID":      0,
		"BY_ADDR_TYPE_NAME":    1,
		"BY_ADDR_TYPE_CODE":    2,
		"BY_ADDR_TYPE_CREATED": 3,
		"BY_ADDR_TYPE_CHANGED": 4,
	}
)

func (x ClientsMS_AddressTypesOrder) Enum() *ClientsMS_AddressTypesOrder {
	p := new(ClientsMS_AddressTypesOrder)
	*p = x
	return p
}

func (x ClientsMS_AddressTypesOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientsMS_AddressTypesOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_clients_proto_enumTypes[3].Descriptor()
}

func (ClientsMS_AddressTypesOrder) Type() protoreflect.EnumType {
	return &file_clients_proto_enumTypes[3]
}

func (x ClientsMS_AddressTypesOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientsMS_AddressTypesOrder.Descriptor instead.
func (ClientsMS_AddressTypesOrder) EnumDescriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{3}
}

// =============== //
//
//	Countries     //
//
// =============== //
type RequestCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken        string         `protobuf:"bytes,1,opt,name=AuthToken,proto3" json:"AuthToken,omitempty"`
	CountryId        uint64         `protobuf:"fixed64,2,opt,name=CountryId,proto3" json:"CountryId,omitempty"`
	CountryName      string         `protobuf:"bytes,3,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	CountryComment   string         `protobuf:"bytes,4,opt,name=CountryComment,proto3" json:"CountryComment,omitempty"`
	CountryIsDeleted ClientsMS_Bool `protobuf:"varint,5,opt,name=CountryIsDeleted,proto3,enum=clients.ClientsMS_Bool" json:"CountryIsDeleted,omitempty"`
	// Order in query
	CountryOrder     ClientsMS_CountryOrder `protobuf:"varint,6,opt,name=CountryOrder,proto3,enum=clients.ClientsMS_CountryOrder" json:"CountryOrder,omitempty"`
	CountryOrderType ClientsMS_OrderType    `protobuf:"varint,7,opt,name=CountryOrderType,proto3,enum=clients.ClientsMS_OrderType" json:"CountryOrderType,omitempty"`
	// AuthorId needed to create and update
	AuthorId uint64 `protobuf:"fixed64,8,opt,name=AuthorId,proto3" json:"AuthorId,omitempty"`
}

func (x *RequestCountry) Reset() {
	*x = RequestCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clients_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCountry) ProtoMessage() {}

func (x *RequestCountry) ProtoReflect() protoreflect.Message {
	mi := &file_clients_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCountry.ProtoReflect.Descriptor instead.
func (*RequestCountry) Descriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{0}
}

func (x *RequestCountry) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *RequestCountry) GetCountryId() uint64 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *RequestCountry) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *RequestCountry) GetCountryComment() string {
	if x != nil {
		return x.CountryComment
	}
	return ""
}

func (x *RequestCountry) GetCountryIsDeleted() ClientsMS_Bool {
	if x != nil {
		return x.CountryIsDeleted
	}
	return ClientsMS_Bool_IS_ANY
}

func (x *RequestCountry) GetCountryOrder() ClientsMS_CountryOrder {
	if x != nil {
		return x.CountryOrder
	}
	return ClientsMS_CountryOrder_BY_COUNTRY_ID
}

func (x *RequestCountry) GetCountryOrderType() ClientsMS_OrderType {
	if x != nil {
		return x.CountryOrderType
	}
	return ClientsMS_OrderType_ASC
}

func (x *RequestCountry) GetAuthorId() uint64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

type RequestCountriesDeletionFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken string         `protobuf:"bytes,1,opt,name=AuthToken,proto3" json:"AuthToken,omitempty"`
	AuthorId  uint64         `protobuf:"fixed64,2,opt,name=AuthorId,proto3" json:"AuthorId,omitempty"`
	IsDeleted ClientsMS_Bool `protobuf:"varint,3,opt,name=IsDeleted,proto3,enum=clients.ClientsMS_Bool" json:"IsDeleted,omitempty"`
	CountryId []uint64       `protobuf:"fixed64,4,rep,packed,name=CountryId,proto3" json:"CountryId,omitempty"`
}

func (x *RequestCountriesDeletionFlags) Reset() {
	*x = RequestCountriesDeletionFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clients_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCountriesDeletionFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCountriesDeletionFlags) ProtoMessage() {}

func (x *RequestCountriesDeletionFlags) ProtoReflect() protoreflect.Message {
	mi := &file_clients_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCountriesDeletionFlags.ProtoReflect.Descriptor instead.
func (*RequestCountriesDeletionFlags) Descriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{1}
}

func (x *RequestCountriesDeletionFlags) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *RequestCountriesDeletionFlags) GetAuthorId() uint64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *RequestCountriesDeletionFlags) GetIsDeleted() ClientsMS_Bool {
	if x != nil {
		return x.IsDeleted
	}
	return ClientsMS_Bool_IS_ANY
}

func (x *RequestCountriesDeletionFlags) GetCountryId() []uint64 {
	if x != nil {
		return x.CountryId
	}
	return nil
}

// =============== //
// Address types   //
// =============== //
type RequestAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken                string                      `protobuf:"bytes,1,opt,name=AuthToken,proto3" json:"AuthToken,omitempty"`
	AddrTypeID               uint64                      `protobuf:"fixed64,2,opt,name=AddrTypeID,proto3" json:"AddrTypeID,omitempty"`
	AddrTypeCode             string                      `protobuf:"bytes,3,opt,name=AddrTypeCode,proto3" json:"AddrTypeCode,omitempty"`
	AddrTypeName             string                      `protobuf:"bytes,4,opt,name=AddrTypeName,proto3" json:"AddrTypeName,omitempty"`
	AddrTypeComment          string                      `protobuf:"bytes,5,opt,name=AddrTypeComment,proto3" json:"AddrTypeComment,omitempty"`
	AddrTypeNeedsCleaning    ClientsMS_Bool              `protobuf:"varint,6,opt,name=AddrTypeNeedsCleaning,proto3,enum=clients.ClientsMS_Bool" json:"AddrTypeNeedsCleaning,omitempty"`
	AddrTypeNeedsNormalizing ClientsMS_Bool              `protobuf:"varint,7,opt,name=AddrTypeNeedsNormalizing,proto3,enum=clients.ClientsMS_Bool" json:"AddrTypeNeedsNormalizing,omitempty"`
	AddrTypeIsDeleted        ClientsMS_Bool              `protobuf:"varint,8,opt,name=AddrTypeIsDeleted,proto3,enum=clients.ClientsMS_Bool" json:"AddrTypeIsDeleted,omitempty"`
	AuthorId                 uint64                      `protobuf:"fixed64,9,opt,name=AuthorId,proto3" json:"AuthorId,omitempty"`
	AddressTypesOrder        ClientsMS_AddressTypesOrder `protobuf:"varint,10,opt,name=AddressTypesOrder,proto3,enum=clients.ClientsMS_AddressTypesOrder" json:"AddressTypesOrder,omitempty"`
	AddressTypesOrderType    ClientsMS_OrderType         `protobuf:"varint,11,opt,name=AddressTypesOrderType,proto3,enum=clients.ClientsMS_OrderType" json:"AddressTypesOrderType,omitempty"`
}

func (x *RequestAddressType) Reset() {
	*x = RequestAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clients_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAddressType) ProtoMessage() {}

func (x *RequestAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_clients_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAddressType.ProtoReflect.Descriptor instead.
func (*RequestAddressType) Descriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{2}
}

func (x *RequestAddressType) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *RequestAddressType) GetAddrTypeID() uint64 {
	if x != nil {
		return x.AddrTypeID
	}
	return 0
}

func (x *RequestAddressType) GetAddrTypeCode() string {
	if x != nil {
		return x.AddrTypeCode
	}
	return ""
}

func (x *RequestAddressType) GetAddrTypeName() string {
	if x != nil {
		return x.AddrTypeName
	}
	return ""
}

func (x *RequestAddressType) GetAddrTypeComment() string {
	if x != nil {
		return x.AddrTypeComment
	}
	return ""
}

func (x *RequestAddressType) GetAddrTypeNeedsCleaning() ClientsMS_Bool {
	if x != nil {
		return x.AddrTypeNeedsCleaning
	}
	return ClientsMS_Bool_IS_ANY
}

func (x *RequestAddressType) GetAddrTypeNeedsNormalizing() ClientsMS_Bool {
	if x != nil {
		return x.AddrTypeNeedsNormalizing
	}
	return ClientsMS_Bool_IS_ANY
}

func (x *RequestAddressType) GetAddrTypeIsDeleted() ClientsMS_Bool {
	if x != nil {
		return x.AddrTypeIsDeleted
	}
	return ClientsMS_Bool_IS_ANY
}

func (x *RequestAddressType) GetAuthorId() uint64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *RequestAddressType) GetAddressTypesOrder() ClientsMS_AddressTypesOrder {
	if x != nil {
		return x.AddressTypesOrder
	}
	return ClientsMS_AddressTypesOrder_BY_ADDR_TYPE_ID
}

func (x *RequestAddressType) GetAddressTypesOrderType() ClientsMS_OrderType {
	if x != nil {
		return x.AddressTypesOrderType
	}
	return ClientsMS_OrderType_ASC
}

type RequestAddressesTypesDeletionFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken         string         `protobuf:"bytes,1,opt,name=AuthToken,proto3" json:"AuthToken,omitempty"`
	AuthorId          uint64         `protobuf:"fixed64,2,opt,name=AuthorId,proto3" json:"AuthorId,omitempty"`
	AddrTypeIsDeleted ClientsMS_Bool `protobuf:"varint,3,opt,name=AddrTypeIsDeleted,proto3,enum=clients.ClientsMS_Bool" json:"AddrTypeIsDeleted,omitempty"`
	AddrTypeID        []uint64       `protobuf:"fixed64,4,rep,packed,name=AddrTypeID,proto3" json:"AddrTypeID,omitempty"`
}

func (x *RequestAddressesTypesDeletionFlags) Reset() {
	*x = RequestAddressesTypesDeletionFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clients_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAddressesTypesDeletionFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAddressesTypesDeletionFlags) ProtoMessage() {}

func (x *RequestAddressesTypesDeletionFlags) ProtoReflect() protoreflect.Message {
	mi := &file_clients_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAddressesTypesDeletionFlags.ProtoReflect.Descriptor instead.
func (*RequestAddressesTypesDeletionFlags) Descriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{3}
}

func (x *RequestAddressesTypesDeletionFlags) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *RequestAddressesTypesDeletionFlags) GetAuthorId() uint64 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *RequestAddressesTypesDeletionFlags) GetAddrTypeIsDeleted() ClientsMS_Bool {
	if x != nil {
		return x.AddrTypeIsDeleted
	}
	return ClientsMS_Bool_IS_ANY
}

func (x *RequestAddressesTypesDeletionFlags) GetAddrTypeID() []uint64 {
	if x != nil {
		return x.AddrTypeID
	}
	return nil
}

// =============== //
//
//	Status        //
//
// =============== //
type ClientsMS_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *ClientsMS_Status) Reset() {
	*x = ClientsMS_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clients_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientsMS_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientsMS_Status) ProtoMessage() {}

func (x *ClientsMS_Status) ProtoReflect() protoreflect.Message {
	mi := &file_clients_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientsMS_Status.ProtoReflect.Descriptor instead.
func (*ClientsMS_Status) Descriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{4}
}

func (x *ClientsMS_Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ClientsMS_Status) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// =============== //
//
//	Countries     //
//
// =============== //
type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: db:"country_id"
	CountryId uint64 `protobuf:"fixed64,1,opt,name=CountryId,proto3" json:"CountryId,omitempty" db:"country_id"`
	// @gotags: db:"country_name"
	CountryName string `protobuf:"bytes,2,opt,name=CountryName,proto3" json:"CountryName,omitempty" db:"country_name"`
	// @gotags: db:"country_comment"
	Comment string `protobuf:"bytes,3,opt,name=Comment,proto3" json:"Comment,omitempty" db:"country_comment"`
	// @gotags: db:"country_created"
	CountryCreated string `protobuf:"bytes,4,opt,name=CountryCreated,proto3" json:"CountryCreated,omitempty" db:"country_created"`
	// @gotags: db:"country_created_by"
	CountryCreatedBy uint64 `protobuf:"fixed64,5,opt,name=CountryCreatedBy,proto3" json:"CountryCreatedBy,omitempty" db:"country_created_by"`
	// @gotags: db:"country_created_by_name"
	CountryCreatedByName string `protobuf:"bytes,6,opt,name=CountryCreatedByName,proto3" json:"CountryCreatedByName,omitempty" db:"country_created_by_name"`
	// @gotags: db:"country_changed"
	CountryChanged string `protobuf:"bytes,7,opt,name=CountryChanged,proto3" json:"CountryChanged,omitempty" db:"country_changed"`
	// @gotags: db:"country_changed_by"
	CountryChangedBy uint64 `protobuf:"fixed64,8,opt,name=CountryChangedBy,proto3" json:"CountryChangedBy,omitempty" db:"country_changed_by"`
	// @gotags: db:"country_changed_by_name"
	CountryChangedByName string `protobuf:"bytes,9,opt,name=CountryChangedByName,proto3" json:"CountryChangedByName,omitempty" db:"country_changed_by_name"`
	// @gotags: db:"country_isdeleted"
	CountryIsDeleted bool `protobuf:"varint,10,opt,name=CountryIsDeleted,proto3" json:"CountryIsDeleted,omitempty" db:"country_isdeleted"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clients_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_clients_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{5}
}

func (x *Country) GetCountryId() uint64 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *Country) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *Country) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Country) GetCountryCreated() string {
	if x != nil {
		return x.CountryCreated
	}
	return ""
}

func (x *Country) GetCountryCreatedBy() uint64 {
	if x != nil {
		return x.CountryCreatedBy
	}
	return 0
}

func (x *Country) GetCountryCreatedByName() string {
	if x != nil {
		return x.CountryCreatedByName
	}
	return ""
}

func (x *Country) GetCountryChanged() string {
	if x != nil {
		return x.CountryChanged
	}
	return ""
}

func (x *Country) GetCountryChangedBy() uint64 {
	if x != nil {
		return x.CountryChangedBy
	}
	return 0
}

func (x *Country) GetCountryChangedByName() string {
	if x != nil {
		return x.CountryChangedByName
	}
	return ""
}

func (x *Country) GetCountryIsDeleted() bool {
	if x != nil {
		return x.CountryIsDeleted
	}
	return false
}

type ResponseCountries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Countries []*Country        `protobuf:"bytes,1,rep,name=Countries,proto3" json:"Countries,omitempty"`
	Status    *ClientsMS_Status `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ResponseCountries) Reset() {
	*x = ResponseCountries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clients_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCountries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCountries) ProtoMessage() {}

func (x *ResponseCountries) ProtoReflect() protoreflect.Message {
	mi := &file_clients_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCountries.ProtoReflect.Descriptor instead.
func (*ResponseCountries) Descriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseCountries) GetCountries() []*Country {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *ResponseCountries) GetStatus() *ClientsMS_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// =============== //
// Address types   //
// =============== //
type AddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: db:"address_type_id"
	AddrTypeId uint64 `protobuf:"fixed64,1,opt,name=AddrTypeId,proto3" json:"AddrTypeId,omitempty" db:"address_type_id"`
	// @gotags: db:"address_type_name"
	AddrTypeName string `protobuf:"bytes,2,opt,name=AddrTypeName,proto3" json:"AddrTypeName,omitempty" db:"address_type_name"`
	// @gotags: db:"address_type_code"
	AddrTypeCode string `protobuf:"bytes,3,opt,name=AddrTypeCode,proto3" json:"AddrTypeCode,omitempty" db:"address_type_code"`
	// @gotags: db:"address_type_comment"
	AddrTypeComment string `protobuf:"bytes,4,opt,name=AddrTypeComment,proto3" json:"AddrTypeComment,omitempty" db:"address_type_comment"`
	// @gotags: db:"address_type_needs_normalizing"
	AddrTypeNeedsNormalizing bool `protobuf:"varint,5,opt,name=AddrTypeNeedsNormalizing,proto3" json:"AddrTypeNeedsNormalizing,omitempty" db:"address_type_needs_normalizing"`
	// @gotags: db:"address_type_needs_cleaning"
	AddrTypeNeedsCleaning bool `protobuf:"varint,6,opt,name=AddrTypeNeedsCleaning,proto3" json:"AddrTypeNeedsCleaning,omitempty" db:"address_type_needs_cleaning"`
	// @gotags: db:"address_type_isdeleted"
	AddrTypeIsDeleted bool `protobuf:"varint,7,opt,name=AddrTypeIsDeleted,proto3" json:"AddrTypeIsDeleted,omitempty" db:"address_type_isdeleted"`
	// @gotags: db:"address_type_created"
	AddrTypeCreated string `protobuf:"bytes,8,opt,name=AddrTypeCreated,proto3" json:"AddrTypeCreated,omitempty" db:"address_type_created"`
	// @gotags: db:"address_type_created_by"
	AddrTypeCreatedBy uint64 `protobuf:"fixed64,9,opt,name=AddrTypeCreatedBy,proto3" json:"AddrTypeCreatedBy,omitempty" db:"address_type_created_by"`
	// @gotags: db:"address_type_created_by_name"
	AddrTypeCreatedByName string `protobuf:"bytes,10,opt,name=AddrTypeCreatedByName,proto3" json:"AddrTypeCreatedByName,omitempty" db:"address_type_created_by_name"`
	// @gotags: db:"address_type_changed"
	AddrTypeChanged string `protobuf:"bytes,11,opt,name=AddrTypeChanged,proto3" json:"AddrTypeChanged,omitempty" db:"address_type_changed"`
	// @gotags: db:"address_type_changed_by"
	AddrTypeChangedBy uint64 `protobuf:"fixed64,12,opt,name=AddrTypeChangedBy,proto3" json:"AddrTypeChangedBy,omitempty" db:"address_type_changed_by"`
	// @gotags: db:"address_type_changed_by_name"
	AddrTypeChangedByName string `protobuf:"bytes,13,opt,name=AddrTypeChangedByName,proto3" json:"AddrTypeChangedByName,omitempty" db:"address_type_changed_by_name"`
}

func (x *AddressType) Reset() {
	*x = AddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clients_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressType) ProtoMessage() {}

func (x *AddressType) ProtoReflect() protoreflect.Message {
	mi := &file_clients_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressType.ProtoReflect.Descriptor instead.
func (*AddressType) Descriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{7}
}

func (x *AddressType) GetAddrTypeId() uint64 {
	if x != nil {
		return x.AddrTypeId
	}
	return 0
}

func (x *AddressType) GetAddrTypeName() string {
	if x != nil {
		return x.AddrTypeName
	}
	return ""
}

func (x *AddressType) GetAddrTypeCode() string {
	if x != nil {
		return x.AddrTypeCode
	}
	return ""
}

func (x *AddressType) GetAddrTypeComment() string {
	if x != nil {
		return x.AddrTypeComment
	}
	return ""
}

func (x *AddressType) GetAddrTypeNeedsNormalizing() bool {
	if x != nil {
		return x.AddrTypeNeedsNormalizing
	}
	return false
}

func (x *AddressType) GetAddrTypeNeedsCleaning() bool {
	if x != nil {
		return x.AddrTypeNeedsCleaning
	}
	return false
}

func (x *AddressType) GetAddrTypeIsDeleted() bool {
	if x != nil {
		return x.AddrTypeIsDeleted
	}
	return false
}

func (x *AddressType) GetAddrTypeCreated() string {
	if x != nil {
		return x.AddrTypeCreated
	}
	return ""
}

func (x *AddressType) GetAddrTypeCreatedBy() uint64 {
	if x != nil {
		return x.AddrTypeCreatedBy
	}
	return 0
}

func (x *AddressType) GetAddrTypeCreatedByName() string {
	if x != nil {
		return x.AddrTypeCreatedByName
	}
	return ""
}

func (x *AddressType) GetAddrTypeChanged() string {
	if x != nil {
		return x.AddrTypeChanged
	}
	return ""
}

func (x *AddressType) GetAddrTypeChangedBy() uint64 {
	if x != nil {
		return x.AddrTypeChangedBy
	}
	return 0
}

func (x *AddressType) GetAddrTypeChangedByName() string {
	if x != nil {
		return x.AddrTypeChangedByName
	}
	return ""
}

type ResponseAddressesTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressesTypes []*AddressType    `protobuf:"bytes,1,rep,name=AddressesTypes,proto3" json:"AddressesTypes,omitempty"`
	Status         *ClientsMS_Status `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *ResponseAddressesTypes) Reset() {
	*x = ResponseAddressesTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clients_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseAddressesTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseAddressesTypes) ProtoMessage() {}

func (x *ResponseAddressesTypes) ProtoReflect() protoreflect.Message {
	mi := &file_clients_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseAddressesTypes.ProtoReflect.Descriptor instead.
func (*ResponseAddressesTypes) Descriptor() ([]byte, []int) {
	return file_clients_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseAddressesTypes) GetAddressesTypes() []*AddressType {
	if x != nil {
		return x.AddressesTypes
	}
	return nil
}

func (x *ResponseAddressesTypes) GetStatus() *ClientsMS_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_clients_proto protoreflect.FileDescriptor

var file_clients_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x43, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53,
	0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x10, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49,
	0x64, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x4d, 0x53, 0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x06, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x22, 0xf3, 0x04, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x41, 0x64, 0x64,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41,
	0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x15, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x18, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x65,
	0x64, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x11, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x52, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x15, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x08, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x11, 0x41,
	0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x06, 0x52, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x22, 0x48, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x03, 0x0a, 0x07, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12, 0x32, 0x0a, 0x14,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x11,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xdb, 0x04, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x64, 0x64, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x69,
	0x6e, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x65,
	0x65, 0x64, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x73,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x41, 0x64, 0x64,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x34,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x41,
	0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41,
	0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x41, 0x64, 0x64, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x41, 0x64, 0x64,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x37,
	0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x53, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x53,
	0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x2a, 0x28, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x4d, 0x53, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10,
	0x01, 0x2a, 0x70, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x5f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x42,
	0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x94, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4d,
	0x53, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x59, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x59, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x04, 0x32, 0xbf, 0x05, 0x0a, 0x0f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x45,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x17,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a,
	0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x1a, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1f, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clients_proto_rawDescOnce sync.Once
	file_clients_proto_rawDescData = file_clients_proto_rawDesc
)

func file_clients_proto_rawDescGZIP() []byte {
	file_clients_proto_rawDescOnce.Do(func() {
		file_clients_proto_rawDescData = protoimpl.X.CompressGZIP(file_clients_proto_rawDescData)
	})
	return file_clients_proto_rawDescData
}

var file_clients_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_clients_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_clients_proto_goTypes = []interface{}{
	(ClientsMS_Bool)(0),                        // 0: clients.ClientsMS_Bool
	(ClientsMS_OrderType)(0),                   // 1: clients.ClientsMS_OrderType
	(ClientsMS_CountryOrder)(0),                // 2: clients.ClientsMS_CountryOrder
	(ClientsMS_AddressTypesOrder)(0),           // 3: clients.ClientsMS_AddressTypesOrder
	(*RequestCountry)(nil),                     // 4: clients.RequestCountry
	(*RequestCountriesDeletionFlags)(nil),      // 5: clients.RequestCountriesDeletionFlags
	(*RequestAddressType)(nil),                 // 6: clients.RequestAddressType
	(*RequestAddressesTypesDeletionFlags)(nil), // 7: clients.RequestAddressesTypesDeletionFlags
	(*ClientsMS_Status)(nil),                   // 8: clients.ClientsMS_Status
	(*Country)(nil),                            // 9: clients.Country
	(*ResponseCountries)(nil),                  // 10: clients.ResponseCountries
	(*AddressType)(nil),                        // 11: clients.AddressType
	(*ResponseAddressesTypes)(nil),             // 12: clients.ResponseAddressesTypes
}
var file_clients_proto_depIdxs = []int32{
	0,  // 0: clients.RequestCountry.CountryIsDeleted:type_name -> clients.ClientsMS_Bool
	2,  // 1: clients.RequestCountry.CountryOrder:type_name -> clients.ClientsMS_CountryOrder
	1,  // 2: clients.RequestCountry.CountryOrderType:type_name -> clients.ClientsMS_OrderType
	0,  // 3: clients.RequestCountriesDeletionFlags.IsDeleted:type_name -> clients.ClientsMS_Bool
	0,  // 4: clients.RequestAddressType.AddrTypeNeedsCleaning:type_name -> clients.ClientsMS_Bool
	0,  // 5: clients.RequestAddressType.AddrTypeNeedsNormalizing:type_name -> clients.ClientsMS_Bool
	0,  // 6: clients.RequestAddressType.AddrTypeIsDeleted:type_name -> clients.ClientsMS_Bool
	3,  // 7: clients.RequestAddressType.AddressTypesOrder:type_name -> clients.ClientsMS_AddressTypesOrder
	1,  // 8: clients.RequestAddressType.AddressTypesOrderType:type_name -> clients.ClientsMS_OrderType
	0,  // 9: clients.RequestAddressesTypesDeletionFlags.AddrTypeIsDeleted:type_name -> clients.ClientsMS_Bool
	9,  // 10: clients.ResponseCountries.Countries:type_name -> clients.Country
	8,  // 11: clients.ResponseCountries.Status:type_name -> clients.ClientsMS_Status
	11, // 12: clients.ResponseAddressesTypes.AddressesTypes:type_name -> clients.AddressType
	8,  // 13: clients.ResponseAddressesTypes.Status:type_name -> clients.ClientsMS_Status
	4,  // 14: clients.ClientsServices.GetCountries:input_type -> clients.RequestCountry
	4,  // 15: clients.ClientsServices.CreateCountry:input_type -> clients.RequestCountry
	4,  // 16: clients.ClientsServices.UpdateCountry:input_type -> clients.RequestCountry
	5,  // 17: clients.ClientsServices.UpdateCountriesDeletionFlags:input_type -> clients.RequestCountriesDeletionFlags
	6,  // 18: clients.ClientsServices.GetAddressesTypes:input_type -> clients.RequestAddressType
	6,  // 19: clients.ClientsServices.CreateAddressType:input_type -> clients.RequestAddressType
	6,  // 20: clients.ClientsServices.UpdateAddressType:input_type -> clients.RequestAddressType
	7,  // 21: clients.ClientsServices.UpdateAddressTypeDeletionFlags:input_type -> clients.RequestAddressesTypesDeletionFlags
	10, // 22: clients.ClientsServices.GetCountries:output_type -> clients.ResponseCountries
	10, // 23: clients.ClientsServices.CreateCountry:output_type -> clients.ResponseCountries
	10, // 24: clients.ClientsServices.UpdateCountry:output_type -> clients.ResponseCountries
	10, // 25: clients.ClientsServices.UpdateCountriesDeletionFlags:output_type -> clients.ResponseCountries
	12, // 26: clients.ClientsServices.GetAddressesTypes:output_type -> clients.ResponseAddressesTypes
	12, // 27: clients.ClientsServices.CreateAddressType:output_type -> clients.ResponseAddressesTypes
	12, // 28: clients.ClientsServices.UpdateAddressType:output_type -> clients.ResponseAddressesTypes
	12, // 29: clients.ClientsServices.UpdateAddressTypeDeletionFlags:output_type -> clients.ResponseAddressesTypes
	22, // [22:30] is the sub-list for method output_type
	14, // [14:22] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_clients_proto_init() }
func file_clients_proto_init() {
	if File_clients_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clients_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clients_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCountriesDeletionFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clients_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clients_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAddressesTypesDeletionFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clients_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientsMS_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clients_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clients_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCountries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clients_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clients_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseAddressesTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clients_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clients_proto_goTypes,
		DependencyIndexes: file_clients_proto_depIdxs,
		EnumInfos:         file_clients_proto_enumTypes,
		MessageInfos:      file_clients_proto_msgTypes,
	}.Build()
	File_clients_proto = out.File
	file_clients_proto_rawDesc = nil
	file_clients_proto_goTypes = nil
	file_clients_proto_depIdxs = nil
}
