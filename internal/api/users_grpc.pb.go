// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: users.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServicesClient is the client API for UsersServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServicesClient interface {
	// Users
	AuthUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error)
	GetUsers(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error)
	CreateUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error)
	UpdateUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error)
	DeleteUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error)
	// Users history
	GetUsersHistory(ctx context.Context, in *RequestUsersHistory, opts ...grpc.CallOption) (*ResponseUsersHistory, error)
	DeleteUsersHistory(ctx context.Context, in *RequestUsersHistory, opts ...grpc.CallOption) (*ResponseUsersHistory, error)
	// Roles
	GetUsersRoles(ctx context.Context, in *RequestUsersRoles, opts ...grpc.CallOption) (*ResponseUsersRoles, error)
	CreateUserRole(ctx context.Context, in *RequestUsersRoles, opts ...grpc.CallOption) (*ResponseUsersRoles, error)
	UpdateUserRole(ctx context.Context, in *RequestUsersRoles, opts ...grpc.CallOption) (*ResponseUsersRoles, error)
	DeleteUserRole(ctx context.Context, in *RequestUsersRoles, opts ...grpc.CallOption) (*ResponseUsersRoles, error)
	// Tables
	GetTables(ctx context.Context, in *RequestTables, opts ...grpc.CallOption) (*ResponseTables, error)
	// User access rights (uar in funcs)
	GetUsersAccessRights(ctx context.Context, in *RequestUsersAccessRights, opts ...grpc.CallOption) (*ResponseUsersAccessRights, error)
	CreateUsersAccessRights(ctx context.Context, in *RequestUAR_Mass, opts ...grpc.CallOption) (*ResponseUsersAccessRights, error)
	UpdateUsersAccessRights(ctx context.Context, in *RequestUAR_Mass, opts ...grpc.CallOption) (*ResponseUsersAccessRights, error)
	DeleteUsersAccessRights(ctx context.Context, in *RequestUAR_Mass, opts ...grpc.CallOption) (*ResponseUsersAccessRights, error)
	GetUserAccessRightForTable(ctx context.Context, in *RequestUARforTable, opts ...grpc.CallOption) (*ResponseUARforTable, error)
}

type usersServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServicesClient(cc grpc.ClientConnInterface) UsersServicesClient {
	return &usersServicesClient{cc}
}

func (c *usersServicesClient) AuthUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error) {
	out := new(ResponseUsers)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/AuthUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) GetUsers(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error) {
	out := new(ResponseUsers)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) CreateUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error) {
	out := new(ResponseUsers)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) UpdateUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error) {
	out := new(ResponseUsers)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) DeleteUser(ctx context.Context, in *RequestUser, opts ...grpc.CallOption) (*ResponseUsers, error) {
	out := new(ResponseUsers)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) GetUsersHistory(ctx context.Context, in *RequestUsersHistory, opts ...grpc.CallOption) (*ResponseUsersHistory, error) {
	out := new(ResponseUsersHistory)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/GetUsersHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) DeleteUsersHistory(ctx context.Context, in *RequestUsersHistory, opts ...grpc.CallOption) (*ResponseUsersHistory, error) {
	out := new(ResponseUsersHistory)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/DeleteUsersHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) GetUsersRoles(ctx context.Context, in *RequestUsersRoles, opts ...grpc.CallOption) (*ResponseUsersRoles, error) {
	out := new(ResponseUsersRoles)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/GetUsersRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) CreateUserRole(ctx context.Context, in *RequestUsersRoles, opts ...grpc.CallOption) (*ResponseUsersRoles, error) {
	out := new(ResponseUsersRoles)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/CreateUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) UpdateUserRole(ctx context.Context, in *RequestUsersRoles, opts ...grpc.CallOption) (*ResponseUsersRoles, error) {
	out := new(ResponseUsersRoles)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/UpdateUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) DeleteUserRole(ctx context.Context, in *RequestUsersRoles, opts ...grpc.CallOption) (*ResponseUsersRoles, error) {
	out := new(ResponseUsersRoles)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/DeleteUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) GetTables(ctx context.Context, in *RequestTables, opts ...grpc.CallOption) (*ResponseTables, error) {
	out := new(ResponseTables)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/GetTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) GetUsersAccessRights(ctx context.Context, in *RequestUsersAccessRights, opts ...grpc.CallOption) (*ResponseUsersAccessRights, error) {
	out := new(ResponseUsersAccessRights)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/GetUsersAccessRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) CreateUsersAccessRights(ctx context.Context, in *RequestUAR_Mass, opts ...grpc.CallOption) (*ResponseUsersAccessRights, error) {
	out := new(ResponseUsersAccessRights)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/CreateUsersAccessRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) UpdateUsersAccessRights(ctx context.Context, in *RequestUAR_Mass, opts ...grpc.CallOption) (*ResponseUsersAccessRights, error) {
	out := new(ResponseUsersAccessRights)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/UpdateUsersAccessRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) DeleteUsersAccessRights(ctx context.Context, in *RequestUAR_Mass, opts ...grpc.CallOption) (*ResponseUsersAccessRights, error) {
	out := new(ResponseUsersAccessRights)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/DeleteUsersAccessRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServicesClient) GetUserAccessRightForTable(ctx context.Context, in *RequestUARforTable, opts ...grpc.CallOption) (*ResponseUARforTable, error) {
	out := new(ResponseUARforTable)
	err := c.cc.Invoke(ctx, "/usr.UsersServices/GetUserAccessRightForTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServicesServer is the server API for UsersServices service.
// All implementations must embed UnimplementedUsersServicesServer
// for forward compatibility
type UsersServicesServer interface {
	// Users
	AuthUser(context.Context, *RequestUser) (*ResponseUsers, error)
	GetUsers(context.Context, *RequestUser) (*ResponseUsers, error)
	CreateUser(context.Context, *RequestUser) (*ResponseUsers, error)
	UpdateUser(context.Context, *RequestUser) (*ResponseUsers, error)
	DeleteUser(context.Context, *RequestUser) (*ResponseUsers, error)
	// Users history
	GetUsersHistory(context.Context, *RequestUsersHistory) (*ResponseUsersHistory, error)
	DeleteUsersHistory(context.Context, *RequestUsersHistory) (*ResponseUsersHistory, error)
	// Roles
	GetUsersRoles(context.Context, *RequestUsersRoles) (*ResponseUsersRoles, error)
	CreateUserRole(context.Context, *RequestUsersRoles) (*ResponseUsersRoles, error)
	UpdateUserRole(context.Context, *RequestUsersRoles) (*ResponseUsersRoles, error)
	DeleteUserRole(context.Context, *RequestUsersRoles) (*ResponseUsersRoles, error)
	// Tables
	GetTables(context.Context, *RequestTables) (*ResponseTables, error)
	// User access rights (uar in funcs)
	GetUsersAccessRights(context.Context, *RequestUsersAccessRights) (*ResponseUsersAccessRights, error)
	CreateUsersAccessRights(context.Context, *RequestUAR_Mass) (*ResponseUsersAccessRights, error)
	UpdateUsersAccessRights(context.Context, *RequestUAR_Mass) (*ResponseUsersAccessRights, error)
	DeleteUsersAccessRights(context.Context, *RequestUAR_Mass) (*ResponseUsersAccessRights, error)
	GetUserAccessRightForTable(context.Context, *RequestUARforTable) (*ResponseUARforTable, error)
	mustEmbedUnimplementedUsersServicesServer()
}

// UnimplementedUsersServicesServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServicesServer struct {
}

func (UnimplementedUsersServicesServer) AuthUser(context.Context, *RequestUser) (*ResponseUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedUsersServicesServer) GetUsers(context.Context, *RequestUser) (*ResponseUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUsersServicesServer) CreateUser(context.Context, *RequestUser) (*ResponseUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServicesServer) UpdateUser(context.Context, *RequestUser) (*ResponseUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersServicesServer) DeleteUser(context.Context, *RequestUser) (*ResponseUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersServicesServer) GetUsersHistory(context.Context, *RequestUsersHistory) (*ResponseUsersHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersHistory not implemented")
}
func (UnimplementedUsersServicesServer) DeleteUsersHistory(context.Context, *RequestUsersHistory) (*ResponseUsersHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsersHistory not implemented")
}
func (UnimplementedUsersServicesServer) GetUsersRoles(context.Context, *RequestUsersRoles) (*ResponseUsersRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersRoles not implemented")
}
func (UnimplementedUsersServicesServer) CreateUserRole(context.Context, *RequestUsersRoles) (*ResponseUsersRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRole not implemented")
}
func (UnimplementedUsersServicesServer) UpdateUserRole(context.Context, *RequestUsersRoles) (*ResponseUsersRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedUsersServicesServer) DeleteUserRole(context.Context, *RequestUsersRoles) (*ResponseUsersRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserRole not implemented")
}
func (UnimplementedUsersServicesServer) GetTables(context.Context, *RequestTables) (*ResponseTables, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTables not implemented")
}
func (UnimplementedUsersServicesServer) GetUsersAccessRights(context.Context, *RequestUsersAccessRights) (*ResponseUsersAccessRights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersAccessRights not implemented")
}
func (UnimplementedUsersServicesServer) CreateUsersAccessRights(context.Context, *RequestUAR_Mass) (*ResponseUsersAccessRights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsersAccessRights not implemented")
}
func (UnimplementedUsersServicesServer) UpdateUsersAccessRights(context.Context, *RequestUAR_Mass) (*ResponseUsersAccessRights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsersAccessRights not implemented")
}
func (UnimplementedUsersServicesServer) DeleteUsersAccessRights(context.Context, *RequestUAR_Mass) (*ResponseUsersAccessRights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsersAccessRights not implemented")
}
func (UnimplementedUsersServicesServer) GetUserAccessRightForTable(context.Context, *RequestUARforTable) (*ResponseUARforTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccessRightForTable not implemented")
}
func (UnimplementedUsersServicesServer) mustEmbedUnimplementedUsersServicesServer() {}

// UnsafeUsersServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServicesServer will
// result in compilation errors.
type UnsafeUsersServicesServer interface {
	mustEmbedUnimplementedUsersServicesServer()
}

func RegisterUsersServicesServer(s grpc.ServiceRegistrar, srv UsersServicesServer) {
	s.RegisterService(&UsersServices_ServiceDesc, srv)
}

func _UsersServices_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).AuthUser(ctx, req.(*RequestUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).GetUsers(ctx, req.(*RequestUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).CreateUser(ctx, req.(*RequestUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).UpdateUser(ctx, req.(*RequestUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).DeleteUser(ctx, req.(*RequestUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_GetUsersHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUsersHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).GetUsersHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/GetUsersHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).GetUsersHistory(ctx, req.(*RequestUsersHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_DeleteUsersHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUsersHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).DeleteUsersHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/DeleteUsersHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).DeleteUsersHistory(ctx, req.(*RequestUsersHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_GetUsersRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUsersRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).GetUsersRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/GetUsersRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).GetUsersRoles(ctx, req.(*RequestUsersRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_CreateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUsersRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).CreateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/CreateUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).CreateUserRole(ctx, req.(*RequestUsersRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUsersRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/UpdateUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).UpdateUserRole(ctx, req.(*RequestUsersRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_DeleteUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUsersRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).DeleteUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/DeleteUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).DeleteUserRole(ctx, req.(*RequestUsersRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_GetTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTables)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).GetTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/GetTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).GetTables(ctx, req.(*RequestTables))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_GetUsersAccessRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUsersAccessRights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).GetUsersAccessRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/GetUsersAccessRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).GetUsersAccessRights(ctx, req.(*RequestUsersAccessRights))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_CreateUsersAccessRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUAR_Mass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).CreateUsersAccessRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/CreateUsersAccessRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).CreateUsersAccessRights(ctx, req.(*RequestUAR_Mass))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_UpdateUsersAccessRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUAR_Mass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).UpdateUsersAccessRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/UpdateUsersAccessRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).UpdateUsersAccessRights(ctx, req.(*RequestUAR_Mass))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_DeleteUsersAccessRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUAR_Mass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).DeleteUsersAccessRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/DeleteUsersAccessRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).DeleteUsersAccessRights(ctx, req.(*RequestUAR_Mass))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersServices_GetUserAccessRightForTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUARforTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServicesServer).GetUserAccessRightForTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usr.UsersServices/GetUserAccessRightForTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServicesServer).GetUserAccessRightForTable(ctx, req.(*RequestUARforTable))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersServices_ServiceDesc is the grpc.ServiceDesc for UsersServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usr.UsersServices",
	HandlerType: (*UsersServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthUser",
			Handler:    _UsersServices_AuthUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UsersServices_GetUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UsersServices_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UsersServices_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UsersServices_DeleteUser_Handler,
		},
		{
			MethodName: "GetUsersHistory",
			Handler:    _UsersServices_GetUsersHistory_Handler,
		},
		{
			MethodName: "DeleteUsersHistory",
			Handler:    _UsersServices_DeleteUsersHistory_Handler,
		},
		{
			MethodName: "GetUsersRoles",
			Handler:    _UsersServices_GetUsersRoles_Handler,
		},
		{
			MethodName: "CreateUserRole",
			Handler:    _UsersServices_CreateUserRole_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _UsersServices_UpdateUserRole_Handler,
		},
		{
			MethodName: "DeleteUserRole",
			Handler:    _UsersServices_DeleteUserRole_Handler,
		},
		{
			MethodName: "GetTables",
			Handler:    _UsersServices_GetTables_Handler,
		},
		{
			MethodName: "GetUsersAccessRights",
			Handler:    _UsersServices_GetUsersAccessRights_Handler,
		},
		{
			MethodName: "CreateUsersAccessRights",
			Handler:    _UsersServices_CreateUsersAccessRights_Handler,
		},
		{
			MethodName: "UpdateUsersAccessRights",
			Handler:    _UsersServices_UpdateUsersAccessRights_Handler,
		},
		{
			MethodName: "DeleteUsersAccessRights",
			Handler:    _UsersServices_DeleteUsersAccessRights_Handler,
		},
		{
			MethodName: "GetUserAccessRightForTable",
			Handler:    _UsersServices_GetUserAccessRightForTable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
